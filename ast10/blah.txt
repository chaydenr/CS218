
global aSept2int
aSept2int:

push 	rbx
push 	rcx
push 	rdx
push 	r12
push 	r13
push 	r14

mov 	r10, 0
mov 	r14, 0
mov 	rax, 0

jmp 	checkLength

spaces:
cmp 	rax, 0
jne 	convFail
inc 	r10

checkLength:
mov 	r9, 0
cmp 	r14, 50
je 		convFail

mov 	r9b, byte[rdi + r10]
mov 	rdx, 7
cmp 	r9b, NULL
je 		convEnd

conv2Int:
cmp 	r9b, ' '
je 		spaces
sub 	r9b, '0'
cmp 	r9b, 0
jl 		convFail
cmp 	r9b, 7
jg 		convFail
mul 	rdx
add 	rax, r9
inc 	r14
inc 	r10
jmp 	checkLength

convSuccess:
mov 	dword[rsi], eax
mov 	rax, TRUE
jmp 	convEnd

convFail:
mov 	rax, FALSE

convEnd:
pop 	r14
pop 	r13
pop 	r12
pop 	rdx
pop 	rcx
pop 	rbx

ret